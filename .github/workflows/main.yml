# .github/workflows/main.yml

name: CI/CD Pipeline - Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-push-images: # 기존 작업: 이미지 빌드 및 ECR 푸시
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    outputs: # 이 작업의 출력값을 정의하여 다음 작업에서 사용할 수 있도록 합니다.
      backend_image_latest: ${{ steps.image_details.outputs.BACKEND_IMAGE_LATEST_OUTPUT }}
      backend_image_commit: ${{ steps.image_details.outputs.BACKEND_IMAGE_COMMIT_OUTPUT }}
      frontend_image_latest: ${{ steps.image_details.outputs.FRONTEND_IMAGE_LATEST_OUTPUT }}
      frontend_image_commit: ${{ steps.image_details.outputs.FRONTEND_IMAGE_COMMIT_OUTPUT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image details and export for other jobs
        id: image_details
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BACKEND: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          ECR_REPOSITORY_FRONTEND: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
          IMAGE_TAG_LATEST: latest
          IMAGE_TAG_COMMIT_SHA: ${{ github.sha }}
        run: |
          COMMIT_SHA_SHORT=$(echo ${IMAGE_TAG_COMMIT_SHA} | cut -c1-7)
          # For current job's env (이것은 현재 작업 내에서만 유효)
          echo "BACKEND_IMAGE_LATEST_ENV=${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:${IMAGE_TAG_LATEST}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_COMMIT_ENV=${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:${COMMIT_SHA_SHORT}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_LATEST_ENV=${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:${IMAGE_TAG_LATEST}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_COMMIT_ENV=${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:${COMMIT_SHA_SHORT}" >> $GITHUB_ENV
          # Set outputs for other jobs (이것이 다음 작업으로 전달됨)
          echo "BACKEND_IMAGE_LATEST_OUTPUT=${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:${IMAGE_TAG_LATEST}" >> $GITHUB_OUTPUT
          echo "BACKEND_IMAGE_COMMIT_OUTPUT=${ECR_REGISTRY}/${ECR_REPOSITORY_BACKEND}:${COMMIT_SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "FRONTEND_IMAGE_LATEST_OUTPUT=${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:${IMAGE_TAG_LATEST}" >> $GITHUB_OUTPUT
          echo "FRONTEND_IMAGE_COMMIT_OUTPUT=${ECR_REGISTRY}/${ECR_REPOSITORY_FRONTEND}:${COMMIT_SHA_SHORT}" >> $GITHUB_OUTPUT


      - name: Build, tag, and push backend image to Amazon ECR
        run: |
          docker build -t ${{ env.BACKEND_IMAGE_LATEST_ENV }} -t ${{ env.BACKEND_IMAGE_COMMIT_ENV }} ./backend
          docker push ${{ env.BACKEND_IMAGE_LATEST_ENV }}
          docker push ${{ env.BACKEND_IMAGE_COMMIT_ENV }}

      - name: Build, tag, and push frontend image to Amazon ECR
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE_LATEST_ENV }} -t ${{ env.FRONTEND_IMAGE_COMMIT_ENV }} ./frontend
          docker push ${{ env.FRONTEND_IMAGE_LATEST_ENV }}
          docker push ${{ env.FRONTEND_IMAGE_COMMIT_ENV }}

  # === 새로운 배포 작업 추가 ===
  deploy-to-ec2:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest
    needs: build-and-push-images
    env: # deploy 작업 전체에서 사용할 환경 변수 설정
      # 이전 작업(build-and-push-images)의 출력값을 가져와 환경 변수로 설정
      # 여기에서 사용하는 이름(예: BACKEND_IMAGE_URI)은 이 deploy-to-ec2 작업 내에서 유효합니다.
      PASSED_BACKEND_IMAGE_URI: ${{ needs.build-and-push-images.outputs.backend_image_commit }}
      PASSED_FRONTEND_IMAGE_URI: ${{ needs.build-and-push-images.outputs.frontend_image_commit }}
      POSTGRES_USER: exampleuser # 로컬 docker-compose.yml과 동일하게 우선 설정
      POSTGRES_PASSWORD: examplepass
      POSTGRES_DB: exampledb
      APP_DIR: /home/${{ secrets.EC2_USER }}/app

    steps:
      # === 디버깅을 위한 새로운 단계 추가 ===
      - name: Print Received Image URIs for Debugging
        run: |
          echo "Received for deploy - Backend Image URI: ${{ env.PASSED_BACKEND_IMAGE_URI }}"
          echo "Received for deploy - Frontend Image URI: ${{ env.PASSED_FRONTEND_IMAGE_URI }}"

      - name: Deploy to EC2 server using SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          debug: true # 디버그 로그는 계속 켜두는 것이 좋습니다.
          script: |
            echo "EC2 Script - Backend Image URI is: $PASSED_BACKEND_IMAGE_URI" # SSH 스크립트 내에서 환경 변수 사용
            echo "EC2 Script - Frontend Image URI is: $PASSED_FRONTEND_IMAGE_URI"

            mkdir -p ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}

            echo 'version: "3.8" # 또는 이 줄 삭제
            services:
              backend:
                image: ${{ env.PASSED_BACKEND_IMAGE_URI }} # GitHub Actions가 이 부분을 실제 값으로 치환
                ports:
                  - "3001:3001"
                environment:
                  NODE_ENV: production
                  DB_USER: ${{ env.POSTGRES_USER }}
                  DB_HOST: db
                  DB_NAME: ${{ env.POSTGRES_DB }}
                  DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
                  DB_PORT: 5432
                depends_on:
                  - db
              frontend:
                image: ${{ env.PASSED_FRONTEND_IMAGE_URI }} # GitHub Actions가 이 부분을 실제 값으로 치환
                ports:
                  - "80:80"
                depends_on:
                  - backend
              db:
                image: postgres:15-alpine
                environment:
                  POSTGRES_USER: ${{ env.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
                  POSTGRES_DB: ${{ env.POSTGRES_DB }}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            volumes:
              postgres_data:
                driver: local
            ' > docker-compose.yml

            echo "Pulling latest images from ECR..."
            docker-compose pull

            echo "Starting application with new images..."
            docker-compose up -d --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -af