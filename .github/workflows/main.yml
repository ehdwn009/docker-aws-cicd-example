# .github/workflows/main.yml

name: CI/CD Pipeline - Build, Push to ECR, and Deploy to EC2

on:
  push:
    branches: [ main ] # 'main' 브랜치에 푸시될 때만 이 워크플로를 실행합니다.

jobs:
  build-and-push-images:
    name: Build and Push Docker Images to ECR
    runs-on: ubuntu-latest
    outputs:
      # 이제 커밋 태그와 테스트 값만 다음 작업으로 전달합니다.
      out_image_tag_commit: ${{ steps.image_details.outputs.image_tag_commit_key }}
      out_simple_test_passed: ${{ steps.image_details.outputs.my_simple_test_key }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image details and export for other jobs
        id: image_details
        env:
          ECR_REGISTRY_ENV: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_BACKEND_ENV: ${{ secrets.ECR_REPOSITORY_BACKEND }}
          ECR_REPOSITORY_FRONTEND_ENV: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
          IMAGE_TAG_LATEST_ENV: latest
          IMAGE_TAG_COMMIT_SHA_ENV: ${{ github.sha }}
        run: |
          COMMIT_SHA_SHORT=$(echo ${IMAGE_TAG_COMMIT_SHA_ENV} | cut -c1-7)
          
          echo "BACKEND_IMAGE_LATEST_FOR_BUILD=${ECR_REGISTRY_ENV}/${ECR_REPOSITORY_BACKEND_ENV}:${IMAGE_TAG_LATEST_ENV}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE_COMMIT_FOR_BUILD=${ECR_REGISTRY_ENV}/${ECR_REPOSITORY_BACKEND_ENV}:${COMMIT_SHA_SHORT}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_LATEST_FOR_BUILD=${ECR_REGISTRY_ENV}/${ECR_REPOSITORY_FRONTEND_ENV}:${IMAGE_TAG_LATEST_ENV}" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE_COMMIT_FOR_BUILD=${ECR_REGISTRY_ENV}/${ECR_REPOSITORY_FRONTEND_ENV}:${COMMIT_SHA_SHORT}" >> $GITHUB_ENV

          echo "Debug (build job) - ECR_REGISTRY_ENV: ${ECR_REGISTRY_ENV}"
          echo "Debug (build job) - ECR_REPOSITORY_BACKEND_ENV: ${ECR_REPOSITORY_BACKEND_ENV}"
          echo "Debug (build job) - ECR_REPOSITORY_FRONTEND_ENV: ${ECR_REPOSITORY_FRONTEND_ENV}"
          echo "Debug (build job) - IMAGE_TAG_LATEST_ENV: ${IMAGE_TAG_LATEST_ENV}"
          echo "Debug (build job) - COMMIT_SHA_SHORT for tag: ${COMMIT_SHA_SHORT}"
          
          echo "image_tag_commit_key=${COMMIT_SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "my_simple_test_key=TestSuccessfulAndPassed" >> $GITHUB_OUTPUT
          
          echo "--- Content of GITHUB_OUTPUT file (build job) ---"
          cat $GITHUB_OUTPUT
          echo "-------------------------------------------------"

      - name: Build, tag, and push backend image to Amazon ECR
        run: |
          docker build -t ${{ env.BACKEND_IMAGE_LATEST_FOR_BUILD }} -t ${{ env.BACKEND_IMAGE_COMMIT_FOR_BUILD }} ./backend
          docker push ${{ env.BACKEND_IMAGE_LATEST_FOR_BUILD }}
          docker push ${{ env.BACKEND_IMAGE_COMMIT_FOR_BUILD }}

      - name: Build, tag, and push frontend image to Amazon ECR
        run: |
          docker build -t ${{ env.FRONTEND_IMAGE_LATEST_FOR_BUILD }} -t ${{ env.FRONTEND_IMAGE_COMMIT_FOR_BUILD }} ./frontend
          docker push ${{ env.FRONTEND_IMAGE_LATEST_FOR_BUILD }}
          docker push ${{ env.FRONTEND_IMAGE_COMMIT_FOR_BUILD }}

  deploy-to-ec2:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest
    needs: build-and-push-images
    env: 
      TARGET_ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      TARGET_BACKEND_REPO: ${{ secrets.ECR_REPOSITORY_BACKEND }}
      TARGET_FRONTEND_REPO: ${{ secrets.ECR_REPOSITORY_FRONTEND }}
      TARGET_TAG_COMMIT: ${{ needs.build-and-push-images.outputs.out_image_tag_commit }}
      TARGET_SIMPLE_TEST: ${{ needs.build-and-push-images.outputs.out_simple_test_passed }}
      
      POSTGRES_USER: exampleuser 
      POSTGRES_PASSWORD: examplepass
      POSTGRES_DB: exampledb
      APP_DIR: /home/${{ secrets.EC2_USER }}/app

    steps:
      - name: Construct Full Image URIs and Print for Debugging
        id: construct_uris
        run: |
          echo "Debug (deploy job) - Received TARGET_ECR_REGISTRY: ${{ env.TARGET_ECR_REGISTRY }}"
          echo "Debug (deploy job) - Received TARGET_BACKEND_REPO: ${{ env.TARGET_BACKEND_REPO }}"
          echo "Debug (deploy job) - Received TARGET_FRONTEND_REPO: ${{ env.TARGET_FRONTEND_REPO }}"
          echo "Debug (deploy job) - Received TARGET_TAG_COMMIT: ${{ env.TARGET_TAG_COMMIT }}"
          echo "Debug (deploy job) - Received TARGET_SIMPLE_TEST: ${{ env.TARGET_SIMPLE_TEST }}"

          FINAL_BACKEND_IMAGE_URI_VAL="${{ env.TARGET_ECR_REGISTRY }}/${{ env.TARGET_BACKEND_REPO }}:${{ env.TARGET_TAG_COMMIT }}"
          FINAL_FRONTEND_IMAGE_URI_VAL="${{ env.TARGET_ECR_REGISTRY }}/${{ env.TARGET_FRONTEND_REPO }}:${{ env.TARGET_TAG_COMMIT }}"
          
          echo "Constructed - Backend Image URI: ${FINAL_BACKEND_IMAGE_URI_VAL}"
          echo "Constructed - Frontend Image URI: ${FINAL_FRONTEND_IMAGE_URI_VAL}"
          
          echo "FINAL_BACKEND_URI_FOR_SCRIPT=${FINAL_BACKEND_IMAGE_URI_VAL}" >> $GITHUB_ENV
          echo "FINAL_FRONTEND_URI_FOR_SCRIPT=${FINAL_FRONTEND_IMAGE_URI_VAL}" >> $GITHUB_ENV

      - name: Deploy to EC2 server using SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }} # 오타 수정: EC2_USER 여야 합니다.
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          debug: true
          script: |
            echo "--- Variables for docker-compose.yml on EC2 ---"
            echo "Backend Image for compose: ${{ env.FINAL_BACKEND_URI_FOR_SCRIPT }}"
            echo "Frontend Image for compose: ${{ env.FINAL_FRONTEND_URI_FOR_SCRIPT }}"
            echo "APP_DIR on EC2: ${{ env.APP_DIR }}"
            echo "-----------------------------------------------------"

            mkdir -p ${{ env.APP_DIR }}
            cd ${{ env.APP_DIR }}

            # EC2 인스턴스에서 사용할 docker-compose.yml 파일 생성
            echo 'version: "3.8" # 또는 이 줄 삭제
            services:
              backend:
                image: ${{ env.FINAL_BACKEND_URI_FOR_SCRIPT }}
                ports:
                  - "3001:3001"
                environment:
                  NODE_ENV: production
                  DB_USER: ${{ env.POSTGRES_USER }}
                  DB_HOST: db 
                  DB_NAME: ${{ env.POSTGRES_DB }}
                  DB_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
                  DB_PORT: 5432
                depends_on:
                  - db
              frontend:
                image: ${{ env.FINAL_FRONTEND_URI_FOR_SCRIPT }}
                ports:
                  - "80:80" 
                depends_on:
                  - backend
              db:
                image: postgres:15-alpine
                environment:
                  POSTGRES_USER: ${{ env.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
                  POSTGRES_DB: ${{ env.POSTGRES_DB }}
                volumes:
                  - postgres_data:/var/lib/postgresql/data
            volumes:
              postgres_data:
                driver: local
            ' > docker-compose.yml

            echo "--- Generated docker-compose.yml content on EC2 ---"
            cat docker-compose.yml
            echo "-----------------------------------------------------"

            # === ECR 로그인 명령어 추가 ===
            echo "Logging in to Amazon ECR..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.TARGET_ECR_REGISTRY }}
            # ==============================

            echo "Pulling latest images from ECR..."
            docker-compose pull

            echo "Starting application with new images..."
            docker-compose up -d --remove-orphans

            echo "Cleaning up old Docker images..."
            docker image prune -af